import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# Настройка логирования
logging.basicConfig(level=logging.INFO)

# Токен API вашего бота
TOKEN = 'nтокен бота'  # Замените на ваш токен

# Словарь для хранения подписок пользователей
subscriptions = {}

# Словарь для хранения username пользователей
user_usernames = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Начальное приветствие"""
    await update.message.reply_text('Добро пожаловать! Используйте /subscribe <тег>, чтобы подписаться на тег.')

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Подписка на тег"""
    user_id = update.message.from_user.id
    tag = context.args[0] if context.args else None
    username = update.message.from_user.username

    if tag:
        if user_id not in subscriptions:
            subscriptions[user_id] = []
        if tag not in subscriptions[user_id]:
            subscriptions[user_id].append(tag)
            await update.message.reply_text(f'Вы подписались на тег: {tag}')
            if username:
                user_usernames[user_id] = username
        else:
            await update.message.reply_text(f'Вы уже подписаны на тег: {tag}')
    else:
        await update.message.reply_text('Пожалуйста, укажите тег.')

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Отписка от тега"""
    user_id = update.message.from_user.id
    tag = context.args[0] if context.args else None

    if tag:
        if user_id in subscriptions and tag in subscriptions[user_id]:
            subscriptions[user_id].remove(tag)
            await update.message.reply_text(f'Вы отписались от тега: {tag}')
            if not subscriptions[user_id]:
                del subscriptions[user_id]
            if user_id in user_usernames:
                del user_usernames[user_id]
        else:
            await update.message.reply_text(f'Вы не подписаны на тег: {tag}')
    else:
        await update.message.reply_text('Пожалуйста, укажите тег для отписки.')

async def notify_users(tag: str, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """Уведомление пользователей о сообщении по тегу"""
    users_with_tag = [user_id for user_id, tags in subscriptions.items() if tag in tags]

    if users_with_tag:
        mentions = []
        for user_id in users_with_tag:
            username = user_usernames.get(user_id)
            mentions.append(f"@{username}" if username else f"id:{user_id}")
        mentions_text = ", ".join(mentions)
        message_text = f'Новое сообщение по тегу: {tag}\nУпоминания: {mentions_text}'

        try:
            await context.bot.send_message(chat_id=chat_id, text=message_text)
        except Exception as e:
            logging.error(f"Ошибка отправки сообщения в чат {chat_id}: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Обработка сообщений надо убрать"""
    message_text = update.message.text

    if message_text:
        # Обработка текстовых сообщений и подписей к медиа
        chat_id = update.message.chat.id
        tags = [word[1:] for word in message_text.split() if word.startswith('#')]
        for tag in tags:
            #await update.message.reply_text(f"Обнаружен тег: #{tag}. Пожалуйста, избегайте использования тегов.") # Удалено
            await notify_users(tag, context, chat_id)

    elif update.message.audio and update.message.caption:
        # Обработка аудиофайлов с подписью
        chat_id = update.message.chat.id
        tags = [word[1:] for word in update.message.caption.split() if word.startswith('#')]
        for tag in tags:
            #await update.message.reply_text(f"Обнаружен тег: #{tag} в подписи к аудиофайлу. Пожалуйста, избегайте использования тегов.") # Удалено
            await notify_users(tag, context, chat_id)

    # Обработка изображений с подписью
    elif update.message.photo and update.message.caption:
        chat_id = update.message.chat.id
        tags = [word[1:] for word in update.message.caption.split() if word.startswith('#')]
        for tag in tags:
            #await update.message.reply_text(f"Обнаружен тег: #{tag} в подписи к изображению. Пожалуйста, избегайте использования тегов.") # Удалено
            await notify_users(tag, context, chat_id)

    # Обработка видео с подписью
    elif update.message.video and update.message.caption:
        chat_id = update.message.chat.id
        tags = [word[1:] for word in update.message.caption.split() if word.startswith('#')]
        for tag in tags:
            #await update.message.reply_text(f"Обнаружен тег: #{tag} в подписи к видео. Пожалуйста, избегайте использования тегов.") # Удалено
            await notify_users(tag, context, chat_id)


def main():
    """Начальная функция"""
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("subscribe", subscribe))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe))
    application.add_handler(MessageHandler(filters.TEXT, handle_message))
    application.add_handler(MessageHandler(filters.AUDIO | filters.PHOTO | filters.VIDEO, handle_message)) # Обрабатываем аудио, фото и видео

    application.run_polling()

if __name__ == '__main__':
    main()
